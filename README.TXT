Project: better-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate conditional statements.
How to start this project: Create one or more TicketMachine objects.

2. The value returned after I printed a ticket was a zero since the amount I put in was just enough to print a single ticket.
3.The extra money stays in the machine and allows me to use it on my next ticket. If I have to little money, the ticket doesn't print.
5.The ticket value changes when it is printed.
6.Public class TicketMachine(Inner part omitted)
7.Changing the name from Public class to Class pubic makes it so that it doesn't work anymore.
8.Removing Public doesn't affect it and everything will work as normal.
9.Removing the word Class makes it fail and won't work unlike taking out Public.
10.The constructor is called (Public Ticketmachine)
11.The constructors are capitalized because they need to copy the name of the object their controlling.
12.Private int coubnt: The initial value of what ever you're inputting to the code. Private students representative: Member of a student class. Private server host:the client that the code is being written on.
13.The names are Alive,Tutor and Game.
14.Students representative, Person tutor, server host and Game game.
15.It doesn't change anything as long as the code stays the same the order in which they are placed won't affect it.
16.Yes it is necessary to have a semicolon at the end since it is a rule and then it doesn't work.
17.int Status;
18.Theres no class since it's public.
19. 1 Public.
20. No they don't need to be persistent.
21.public Pet(String petsName)
{
this.name = petsName;
}
23.The header is an int and the body is a void. The body is used with the =.
24.How much is in the ticket machine?
25.Everything in the body that says balance you must change it to amount.
27.Error trying to compile since there is error in the code
28.One is a void and the other is an integer
29. Not return statements since it's an system output.
31.public void increaseScore(intPoints)
{
  this.score += points;
}
32.This method changes the value of balance; hence the object's state is mutated.
33.public void discount(int amount)
{
  price = price - amount;
}
34.public void setAge(int currentAge)
{
  this.age = currentAge;
}
37. My cat has green eyes
39.The actual price of the ticket won't show meaning that the word "price" will show since you won't be requesting the actual price.
40.The # price and cents word will show since they are in qutation marks.
42.Once you call the showPrice method to both ticket machines they both send different amounts. It's different since youre calling the method on different machines
44.Once you add the ticket to a fixed price of 1000 cents, once you create a ticket-machine it asks you to name iti instead of entering a value for how much ticket should cost.
46.No it doesnt need any parameters since it has a total state, and it is a mutator because it changes the state instead of getting data/information in any way.
